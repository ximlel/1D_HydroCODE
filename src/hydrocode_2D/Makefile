CC = gcc
#C compiler
CFLAGS   = -std=c99 -Wall -pedantic -Og -g -pg
#CFLAGS += -fprofile-arcs -ftest-coverage
#C compiler options
CFLAGD = -DNODATPLOT
#Macro definition
SRC = ..
#Directory of sources
INCLUDE_FOLDER = include
INCLUDE = $(addprefix -I, $(addprefix $(SRC)/,$(INCLUDE_FOLDER)))
#Inclued folder
LIBS  = -lm -lgcov -lhdf5 -Llib/
LIBS += $(addprefix -l, $(HEAD))
#Library files

RM = rm -vf
#Delete command
CP = cp -vu
#Copy command

#Head folder
HEAD = finite_volume flux_calc inter_process riemann_solver file_io tools
#Name of header files or subdirectories
SOURCE = hydrocode
#Name of the main source 

SRC_LIST = sys_pro.c \
	config_handle.c file_out_hdf5.c file_2D_out.c file_2D_in.c io_control.c terminal_io.c \
	hll_2D_solver.c roe_2D_solver.c roe_solver.c roe_HLL_solver.c linear_grp_solver_Edir_G2D.c linear_grp_solver_Edir_Q1D.c riemann_solver_exact_Ben.c riemann_solver_exact_Toro.c \
	bound_cond_slope_limiter_x.c bound_cond_slope_limiter_y.c fluid_var_check.c slope_limiter.c slope_limiter_2D_x.c \
	flux_generator_x.c flux_generator_y.c flux_solver.c \
	grp_solver_2D_EUL_source.c grp_solver_2D_split_EUL_source.c \

all: modules libscopy $(SOURCE).out
.PHONYP:all

$(SOURCE).out exe: $(SOURCE).c lib/*.a $(addsuffix /*, $(addprefix $(SRC)/,$(INCLUDE_FOLDER)))
	@echo "**********Generate executable file***********"
	$(CC) $(CFLAGS) $(CFLAGD) -o $(SOURCE).out $(SOURCE).c $(INCLUDE) $(LIBS)
.PHONYP:exe

modules:
#Enter each subdirectory
#Call the Makefile in the subdirectory
	@for n in $(HEAD); do \
	( $(MAKE) CC=$(CC) CFLAGS='$(CFLAGS) $(CFLAGD)' SRC_LIST='$(SRC_LIST)' --directory=$(SRC)/$$n )  \
	done;
.PHONYP:modules

lib/*.a lib/*.so libscopy:
	@mkdir -pv lib
	@$(CP) $(addsuffix /*.a, $(addprefix $(SRC)/,$(HEAD))) lib/
	@$(CP) $(addsuffix /*.so,$(addprefix $(SRC)/,$(HEAD))) lib/
.PHONY: libscopy

get: 
#Generate GCOV code coverage report
	gcov $(SOURCE).c
.PHONY: get

html:
#Generate graphical GCOV code coverage report
	#Create test coverage data file
	lcov -c -d .. -o $(SOURCE).info
	#Information generated by LCOV is generated into HTML
	genhtml -o gcovdir $(SOURCE).info
.PHONYP:html

clean_all: clean
#Clean in the directory
	@$(RM) $(SOURCE).out $(SOURCE).exe
	@$(RM) -R lib gcovdir
	@$(RM) pg.png callgrind.png
.PHONYP:clean_all

clean:
#Clean in the subdirectory
	@for n in $(HEAD) $(HEAD_SO); do \
	( $(MAKE) --directory=$(SRC)/$$n clean ) \
	done;
	@$(RM) *.gcov *.gcda *.gcno
	@$(RM) $(SOURCE).info gmon.out pg callgrind.out
.PHONYP:clean
