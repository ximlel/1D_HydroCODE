CC = gcc
#C compiler
CFLAGS = -std=c99 -Wall -pedantic -Og -g -pg -fprofile-arcs -ftest-coverage
#C compiler options
CFLAGD = #-D_Bool=bool
#Macro definition
SRC = ..
#Directory of sources
INCLUDE = -I $(SRC)/include
#Inclued folder
LIBS = -lm -lgcov
#Library files

RM = rm -vf
#Delete command

HEAD = finite_volume inter_process Riemann_solver file_io tools
#Name of header files or subdirectories
SOURCE = hydrocode
#Name of the main source 

all: modules exe
.PHONYP:all

exe:
	@echo "**********Generate executable file***********"
	$(CC) $(CFLAGS) $(CFLAGD) -o $(SOURCE).out $(SOURCE).c $(addsuffix /*.a,$(addprefix $(SRC)/,$(HEAD))) $(INCLUDE) $(LIBS)
.PHONYP:exe

modules:
#Enter each subdirectory
#Call the Makefile in the subdirectory
	@for n in $(HEAD); do \
	( $(MAKE) CC=$(CC) CFLAGS='$(CFLAGS) $(CFLAGD)' --directory=$(SRC)/$$n )  \
	done;
.PHONYP:modules

get: 
#Generate GCOV code coverage report
	gcov $(SOURCE).c
.PHONY: get

html:
#Generate graphical GCOV code coverage report
	#Create test coverage data file
	lcov -c -d .. -o $(SOURCE).info
	#Information generated by LCOV is generated into HTML
	genhtml -o gcovdir $(SOURCE).info
.PHONYP:html

clean:
#Clean in the subdirectory
	@$(RM) $(SOURCE).out $(SOURCE).exe
	@for n in $(HEAD); do \
	( $(MAKE) --directory=$(SRC)/$$n clean ) \
	done;
	@$(RM) *.gcov *.gcda *.gcno
	@$(RM) -R gcovdir
	@$(RM) $(SOURCE).info gmon.out pg callgrind.out
	@$(RM) pg.png callgrind.png
.PHONYP:clean

#Linux terminal color test
all_color: regular bold underline background
.PHONYP:all_color
regular:
	@echo -e "\e[0;30m Gray -Regular"
	@echo -e "\e[0;31m Red"
	@echo -e "\e[0;32m Green"
	@echo -e "\e[0;33m Yellow"
	@echo -e "\e[0;34m Blue"
	@echo -e "\e[0;35m Purple"
	@echo -e "\e[0;36m Cyan"
	@echo -e "\e[0;37m White"
	@echo -e "\e[0m Text Reset"
.PHONYP:regular
bold:
	@echo -e "\e[1;30m Gray -Bold"
	@echo -e "\e[1;31m Red"
	@echo -e "\e[1;32m Green"
	@echo -e "\e[1;33m Yellow"
	@echo -e "\e[1;34m Blue"
	@echo -e "\e[1;35m Purple"
	@echo -e "\e[1;36m Cyan"
	@echo -e "\e[1;37m White"
	@echo -e "\e[0m Text Reset"
.PHONYP:bold
underline:
	@echo -e "\e[4;30m Gray -Underline"
	@echo -e "\e[4;31m Red"
	@echo -e "\e[4;32m Green"
	@echo -e "\e[4;33m Yellow"
	@echo -e "\e[4;34m Blue"
	@echo -e "\e[4;35m Purple"
	@echo -e "\e[4;36m Cyan"
	@echo -e "\e[4;37m White"
	@echo -e "\e[0m Text Reset"
.PHONYP:underline
background:
	@echo -e "\e[40m Gray -Background"
	@echo -e "\e[41m Red"
	@echo -e "\e[42m Green"
	@echo -e "\e[43m Yellow"
	@echo -e "\e[44m Blue"
	@echo -e "\e[45m Purple"
	@echo -e "\e[46m Cyan"
	@echo -e "\e[47m White"
	@echo -e "\e[0m Text Reset"
.PHONYP:background
