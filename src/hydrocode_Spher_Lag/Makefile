CC = g++
#C compiler
CFLAGS = -std=c++20 -Wall -pedantic -Og -g -pg -fprofile-arcs -ftest-coverage
#C compiler options
CFLAGD = -DSPHERICAL_BASICS -DMULTIFLUID_BASICS -D_Bool=bool
#Macro definition
SRC = ..
#Directory of sources
INCLUDE = -I$(SRC)/include
#Inclued folder
LIBS = -lm -lgcov
#Library files

RM = rm -vf
#Delete command

HEAD = finite_volume inter_process inter_process_cpp Riemann_solver meshing file_io tools src_cii
#Name of header files or subdirectories
SOURCE = hydrocode
#Name of the main source 

all: modules exe
.PHONYP:all

exe:
	@echo "**********Generate executable file***********"
	$(CC) $(CFLAGS) $(CFLAGD) -o $(SOURCE).out $(SOURCE).c $(addsuffix /*.a,$(addprefix $(SRC)/,$(HEAD))) $(INCLUDE) $(LIBS)
.PHONYP:exe

modules:
#Enter each subdirectory
#Call the Makefile in the subdirectory
	@for n in $(HEAD); do \
	( $(MAKE) CC=$(CC) CFLAGS='$(CFLAGS) $(CFLAGD)' --directory=$(SRC)/$$n )  \
	done;
.PHONYP:modules

get: 
#Generate GCOV code coverage report
	gcov $(SOURCE).c
.PHONY: get

html:
#Generate graphical GCOV code coverage report
	#Create test coverage data file
	lcov -c -d .. -o $(SOURCE).info
	#Information generated by LCOV is generated into HTML
	genhtml -o gcovdir $(SOURCE).info
.PHONYP:html

clean:
#Clean in the subdirectory
	@$(RM) $(SOURCE).out $(SOURCE).exe
	@for n in $(HEAD); do \
	( $(MAKE) --directory=$(SRC)/$$n clean ) \
	done;
	@$(RM) *.gcov *.gcda *.gcno
	@$(RM) -R gcovdir
	@$(RM) $(SOURCE).info gmon.out pg callgrind.out
	@$(RM) pg.png callgrind.png
.PHONYP:clean
